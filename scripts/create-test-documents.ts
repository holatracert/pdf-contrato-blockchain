import { writeFileSync } from 'fs';
import { join } from 'path';

/**
 * Crea documentos PDF de prueba para testing
 */
class TestDocumentCreator {
  
  /**
   * Crea un PDF b√°sico de prueba
   */
  static createBasicPDF(): Buffer {
    // PDF b√°sico con contenido m√≠nimo
    const pdfContent = Buffer.from([
      0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, // %PDF-1.4
      0x0A, 0x25, 0xE2, 0xE3, 0xCF, 0xD3, 0x0A, 0x34, // \n%√¢√£√è√ì\n4
      0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C, //  0 obj\n<
      0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x43, // </Type/C
      0x61, 0x74, 0x61, 0x6C, 0x6F, 0x67, 0x2F, 0x50, // atalog/P
      0x61, 0x67, 0x65, 0x73, 0x20, 0x31, 0x20, 0x30, // ages 1 0
      0x20, 0x52, 0x3E, 0x3E, 0x0A, 0x65, 0x6E, 0x64, //  R>>\nend
      0x6F, 0x62, 0x6A, 0x0A, 0x0A, 0x78, 0x72, 0x65, // obj\n\nxre
      0x66, 0x0A, 0x30, 0x20, 0x31, 0x0A, 0x30, 0x30, // f\n0 1\n00
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 0000000
      0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x0A, 0x0A, // 0000 n\n\n
      0x74, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x0A, // trailer\n
      0x3C, 0x3C, 0x2F, 0x53, 0x69, 0x7A, 0x65, 0x20, // <<</Size 
      0x31, 0x3E, 0x3E, 0x0A, 0x73, 0x74, 0x61, 0x72, // 1>>\nstar
      0x74, 0x78, 0x72, 0x65, 0x66, 0x0A, 0x30, 0x20, // txref\n0 
      0x31, 0x0A, 0x25, 0x25, 0x45, 0x4F, 0x46, 0x0A  // 1\n%%EOF\n
    ]);
    
    return pdfContent;
  }

  /**
   * Crea un PDF con contenido de texto
   */
  static createTextPDF(): Buffer {
    // PDF con contenido de texto m√°s elaborado
    const pdfContent = Buffer.from([
      0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, // %PDF-1.4
      0x0A, 0x25, 0xE2, 0xE3, 0xCF, 0xD3, 0x0A, 0x34, // \n%√¢√£√è√ì\n4
      0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C, //  0 obj\n<
      0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x43, // </Type/C
      0x61, 0x74, 0x61, 0x6C, 0x6F, 0x67, 0x2F, 0x50, // atalog/P
      0x61, 0x67, 0x65, 0x73, 0x20, 0x31, 0x20, 0x30, // ages 1 0
      0x20, 0x52, 0x2F, 0x4D, 0x65, 0x64, 0x69, 0x61, //  R/Media
      0x42, 0x6F, 0x78, 0x5B, 0x30, 0x20, 0x30, 0x20, // Box[0 0 
      0x36, 0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5D, // 612 792]
      0x3E, 0x3E, 0x0A, 0x65, 0x6E, 0x64, 0x6F, 0x62, // >>\nendob
      0x6A, 0x0A, 0x0A, 0x78, 0x72, 0x65, 0x66, 0x0A, // j\n\nxref\n
      0x30, 0x20, 0x31, 0x0A, 0x30, 0x30, 0x30, 0x30, // 0 1\n0000
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 0000000
      0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x0A, 0x0A, // 0000 n\n\n
      0x74, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x0A, // trailer\n
      0x3C, 0x3C, 0x2F, 0x53, 0x69, 0x7A, 0x65, 0x20, // <<</Size 
      0x31, 0x3E, 0x3E, 0x0A, 0x73, 0x74, 0x61, 0x72, // 1>>\nstar
      0x74, 0x78, 0x72, 0x65, 0x66, 0x0A, 0x30, 0x20, // txref\n0 
      0x31, 0x0A, 0x25, 0x25, 0x45, 0x4F, 0x46, 0x0A  // 1\n%%EOF\n
    ]);
    
    return pdfContent;
  }

  /**
   * Crea un PDF con metadatos
   */
  static createMetadataPDF(): Buffer {
    // PDF con metadatos adicionales
    const pdfContent = Buffer.from([
      0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, // %PDF-1.4
      0x0A, 0x25, 0xE2, 0xE3, 0xCF, 0xD3, 0x0A, 0x34, // \n%√¢√£√è√ì\n4
      0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C, //  0 obj\n<
      0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x43, // </Type/C
      0x61, 0x74, 0x61, 0x6C, 0x6F, 0x67, 0x2F, 0x50, // atalog/P
      0x61, 0x67, 0x65, 0x73, 0x20, 0x31, 0x20, 0x30, // ages 1 0
      0x20, 0x52, 0x2F, 0x4D, 0x65, 0x74, 0x61, 0x64, //  R/Metad
      0x61, 0x74, 0x61, 0x20, 0x32, 0x20, 0x30, 0x20, // ata 2 0 
      0x52, 0x3E, 0x3E, 0x0A, 0x65, 0x6E, 0x64, 0x6F, // R>>\nendo
      0x62, 0x6A, 0x0A, 0x0A, 0x78, 0x72, 0x65, 0x66, // bj\n\nxref
      0x0A, 0x30, 0x20, 0x32, 0x0A, 0x30, 0x30, 0x30, // \n0 2\n000
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 0000000
      0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x0A, 0x30, // 0000 n\n0
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 0000000
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 0000000
      0x20, 0x6E, 0x0A, 0x0A, 0x74, 0x72, 0x61, 0x69, //  n\n\ntrai
      0x6C, 0x65, 0x72, 0x0A, 0x3C, 0x3C, 0x2F, 0x53, // ler\n<<</S
      0x69, 0x7A, 0x65, 0x20, 0x32, 0x3E, 0x3E, 0x0A, // ize 2>>\n
      0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, // startxre
      0x66, 0x0A, 0x30, 0x20, 0x32, 0x0A, 0x25, 0x25, // f\n0 2\n%%
      0x45, 0x4F, 0x46, 0x0A                          // EOF\n
    ]);
    
    return pdfContent;
  }

  /**
   * Crea un PDF grande para pruebas de rendimiento
   */
  static createLargePDF(): Buffer {
    // PDF con m√°s contenido para pruebas de rendimiento
    const basePDF = this.createBasicPDF();
    const additionalContent = Buffer.alloc(1024, 0x20); // 1KB de espacios
    return Buffer.concat([basePDF, additionalContent]);
  }

  /**
   * Crea todos los documentos de prueba
   */
  static createAllTestDocuments(): void {
    const testDir = join(__dirname, '..', 'test-documents');
    
    // Crear directorio si no existe
    const fs = require('fs');
    if (!fs.existsSync(testDir)) {
      fs.mkdirSync(testDir, { recursive: true });
    }

    console.log('üìÑ Creando documentos PDF de prueba...\n');

    // 1. PDF b√°sico
    const basicPDF = this.createBasicPDF();
    writeFileSync(join(testDir, 'documento-basico.pdf'), basicPDF);
    console.log('‚úÖ documento-basico.pdf creado');

    // 2. PDF con texto
    const textPDF = this.createTextPDF();
    writeFileSync(join(testDir, 'documento-texto.pdf'), textPDF);
    console.log('‚úÖ documento-texto.pdf creado');

    // 3. PDF con metadatos
    const metadataPDF = this.createMetadataPDF();
    writeFileSync(join(testDir, 'documento-metadatos.pdf'), metadataPDF);
    console.log('‚úÖ documento-metadatos.pdf creado');

    // 4. PDF grande
    const largePDF = this.createLargePDF();
    writeFileSync(join(testDir, 'documento-grande.pdf'), largePDF);
    console.log('‚úÖ documento-grande.pdf creado');

    // 5. PDF para pruebas de integridad
    const integrityPDF = this.createBasicPDF();
    writeFileSync(join(testDir, 'documento-integridad.pdf'), integrityPDF);
    console.log('‚úÖ documento-integridad.pdf creado');

    console.log('\nüéâ Todos los documentos de prueba han sido creados en: test-documents/');
    console.log('\nüìã Documentos disponibles:');
    console.log('   - documento-basico.pdf (PDF m√≠nimo)');
    console.log('   - documento-texto.pdf (PDF con contenido)');
    console.log('   - documento-metadatos.pdf (PDF con metadatos)');
    console.log('   - documento-grande.pdf (PDF de 1KB+)');
    console.log('   - documento-integridad.pdf (Para pruebas de hash)');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  TestDocumentCreator.createAllTestDocuments();
}

export { TestDocumentCreator };
