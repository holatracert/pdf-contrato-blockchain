import dotenv from 'dotenv';
import { PDFBlockchainService } from './services/PDFBlockchainService';
import { BlockchainConfig, IPFSConfig } from './types';

// Cargar variables de entorno
dotenv.config();

// Configuraci√≥n del sistema
const blockchainConfig: BlockchainConfig = {
  rpcUrl: process.env.ANVIL_RPC_URL || 'http://localhost:8545',
  privateKey: process.env.ANVIL_PRIVATE_KEY || '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',
  contractAddress: process.env.CONTRACT_ADDRESS || '0x4ed7c70f96b99c776995fb64377f0d4ab3b0e1c1',
  networkId: parseInt(process.env.NETWORK_ID || '31337'),
};

const ipfsConfig: IPFSConfig = {
  apiUrl: process.env.IPFS_API_URL || 'http://localhost:5001',
  gatewayUrl: process.env.IPFS_GATEWAY_URL || 'http://localhost:8080',
};

// Crear instancia del servicio
const pdfService = new PDFBlockchainService(blockchainConfig, ipfsConfig);

/**
 * Funci√≥n principal para procesar un documento PDF
 */
async function processDocument(filePath: string) {
  try {
    console.log('üöÄ Iniciando procesamiento de documento PDF...\n');
    
    // Verificar servicios
    await pdfService.checkServices();
    
    // Procesar documento
    const result = await pdfService.processPDFDocument(filePath);
    
    if (result.success) {
      console.log('\nüéâ ¬°Documento procesado exitosamente!');
      console.log(`üìÑ Hash del documento: ${result.documentHash}`);
      console.log(`üåê IPFS Hash: ${result.ipfsHash}`);
      console.log(`‚õìÔ∏è  Transacci√≥n: ${result.transactionHash}`);
      console.log(`üîó URL IPFS: ${pdfService.getIPFSFileURL(result.ipfsHash)}`);
    } else {
      console.log('\n‚ùå Error procesando documento:', result.error);
    }
    
  } catch (error) {
    console.error('‚ùå Error en el proceso:', error);
  }
}

/**
 * Funci√≥n para verificar un documento
 */
async function verifyDocument(documentHash: string) {
  try {
    console.log('üîç Verificando documento...\n');
    
    const result = await pdfService.verifyDocument(documentHash);
    
    if (result.exists && result.info) {
      console.log('‚úÖ Documento verificado exitosamente');
      console.log(`üë§ Propietario: ${result.info.owner}`);
      console.log(`üìÖ Fecha: ${new Date(Number(result.info.timestamp) * 1000).toISOString()}`);
    } else {
      console.log('‚ùå Documento no encontrado en la blockchain');
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando documento:', error);
  }
}

/**
 * Funci√≥n para descargar un documento desde IPFS
 */
async function downloadDocument(ipfsHash: string, outputPath: string) {
  try {
    console.log('üì• Descargando documento desde IPFS...\n');
    
    const success = await pdfService.downloadDocument(ipfsHash, outputPath);
    
    if (success) {
      console.log('‚úÖ Documento descargado exitosamente');
    } else {
      console.log('‚ùå Error descargando documento');
    }
    
  } catch (error) {
    console.error('‚ùå Error descargando documento:', error);
  }
}

// Exportar funciones para uso en otros m√≥dulos
export {
  processDocument,
  verifyDocument,
  downloadDocument,
  pdfService,
};

// Si se ejecuta directamente, mostrar ayuda
if (require.main === module) {
  console.log(`
üîê Sistema de Blockchain para Documentos PDF
==========================================

Uso:
  npm run dev <comando> [argumentos]

Comandos disponibles:
  process <ruta-pdf>           - Procesar un documento PDF
  verify <hash-documento>      - Verificar un documento
  download <ipfs-hash> <ruta>  - Descargar desde IPFS
  check                       - Verificar servicios

Ejemplos:
  npm run dev process ./documento.pdf
  npm run dev verify 0x1234...
  npm run dev download QmHash... ./descarga.pdf
  npm run dev check

Configuraci√≥n:
  - Aseg√∫rate de que Anvil est√© ejecut√°ndose en http://localhost:8545
  - Aseg√∫rate de que IPFS est√© ejecut√°ndose en http://localhost:5001
  - Configura las variables de entorno en .env
`);
}
